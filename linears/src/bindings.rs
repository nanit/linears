/* automatically generated by rust-bindgen 0.60.1 */

pub const LIBLINEAR_VERSION: u32 = 245;
extern "C" {
    pub static mut liblinear_version: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct feature_node {
    pub index: ::std::os::raw::c_int,
    pub value: f64,
}
#[test]
fn bindgen_test_layout_feature_node() {
    assert_eq!(
        ::std::mem::size_of::<feature_node>(),
        16usize,
        concat!("Size of: ", stringify!(feature_node))
    );
    assert_eq!(
        ::std::mem::align_of::<feature_node>(),
        8usize,
        concat!("Alignment of ", stringify!(feature_node))
    );
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<feature_node>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(feature_node),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<feature_node>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(feature_node),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct problem {
    pub l: ::std::os::raw::c_int,
    pub n: ::std::os::raw::c_int,
    pub y: *mut f64,
    pub x: *mut *mut feature_node,
    pub bias: f64,
}
#[test]
fn bindgen_test_layout_problem() {
    assert_eq!(
        ::std::mem::size_of::<problem>(),
        32usize,
        concat!("Size of: ", stringify!(problem))
    );
    assert_eq!(
        ::std::mem::align_of::<problem>(),
        8usize,
        concat!("Alignment of ", stringify!(problem))
    );
    fn test_field_l() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<problem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).l) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(problem),
                "::",
                stringify!(l)
            )
        );
    }
    test_field_l();
    fn test_field_n() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<problem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(problem),
                "::",
                stringify!(n)
            )
        );
    }
    test_field_n();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<problem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(problem),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<problem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(problem),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_bias() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<problem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bias) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(problem),
                "::",
                stringify!(bias)
            )
        );
    }
    test_field_bias();
}
pub const L2R_LR: _bindgen_ty_1 = 0;
pub const L2R_L2LOSS_SVC_DUAL: _bindgen_ty_1 = 1;
pub const L2R_L2LOSS_SVC: _bindgen_ty_1 = 2;
pub const L2R_L1LOSS_SVC_DUAL: _bindgen_ty_1 = 3;
pub const MCSVM_CS: _bindgen_ty_1 = 4;
pub const L1R_L2LOSS_SVC: _bindgen_ty_1 = 5;
pub const L1R_LR: _bindgen_ty_1 = 6;
pub const L2R_LR_DUAL: _bindgen_ty_1 = 7;
pub const L2R_L2LOSS_SVR: _bindgen_ty_1 = 11;
pub const L2R_L2LOSS_SVR_DUAL: _bindgen_ty_1 = 12;
pub const L2R_L1LOSS_SVR_DUAL: _bindgen_ty_1 = 13;
pub const ONECLASS_SVM: _bindgen_ty_1 = 21;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct parameter {
    pub solver_type: ::std::os::raw::c_int,
    pub eps: f64,
    pub C: f64,
    pub nr_weight: ::std::os::raw::c_int,
    pub weight_label: *mut ::std::os::raw::c_int,
    pub weight: *mut f64,
    pub p: f64,
    pub nu: f64,
    pub init_sol: *mut f64,
    pub regularize_bias: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_parameter() {
    assert_eq!(
        ::std::mem::size_of::<parameter>(),
        80usize,
        concat!("Size of: ", stringify!(parameter))
    );
    assert_eq!(
        ::std::mem::align_of::<parameter>(),
        8usize,
        concat!("Alignment of ", stringify!(parameter))
    );
    fn test_field_solver_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).solver_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(solver_type)
            )
        );
    }
    test_field_solver_type();
    fn test_field_eps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eps) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(eps)
            )
        );
    }
    test_field_eps();
    fn test_field_C() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).C) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(C)
            )
        );
    }
    test_field_C();
    fn test_field_nr_weight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_weight) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(nr_weight)
            )
        );
    }
    test_field_nr_weight();
    fn test_field_weight_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).weight_label) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(weight_label)
            )
        );
    }
    test_field_weight_label();
    fn test_field_weight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(weight)
            )
        );
    }
    test_field_weight();
    fn test_field_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(p)
            )
        );
    }
    test_field_p();
    fn test_field_nu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nu) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(nu)
            )
        );
    }
    test_field_nu();
    fn test_field_init_sol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).init_sol) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(init_sol)
            )
        );
    }
    test_field_init_sol();
    fn test_field_regularize_bias() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<parameter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).regularize_bias) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(parameter),
                "::",
                stringify!(regularize_bias)
            )
        );
    }
    test_field_regularize_bias();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct model {
    pub param: parameter,
    pub nr_class: ::std::os::raw::c_int,
    pub nr_feature: ::std::os::raw::c_int,
    pub w: *mut f64,
    pub label: *mut ::std::os::raw::c_int,
    pub bias: f64,
    pub rho: f64,
}
#[test]
fn bindgen_test_layout_model() {
    assert_eq!(
        ::std::mem::size_of::<model>(),
        120usize,
        concat!("Size of: ", stringify!(model))
    );
    assert_eq!(
        ::std::mem::align_of::<model>(),
        8usize,
        concat!("Alignment of ", stringify!(model))
    );
    fn test_field_param() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<model>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(model),
                "::",
                stringify!(param)
            )
        );
    }
    test_field_param();
    fn test_field_nr_class() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<model>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_class) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(model),
                "::",
                stringify!(nr_class)
            )
        );
    }
    test_field_nr_class();
    fn test_field_nr_feature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<model>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nr_feature) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(model),
                "::",
                stringify!(nr_feature)
            )
        );
    }
    test_field_nr_feature();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<model>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            88usize,
            concat!("Offset of field: ", stringify!(model), "::", stringify!(w))
        );
    }
    test_field_w();
    fn test_field_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<model>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(model),
                "::",
                stringify!(label)
            )
        );
    }
    test_field_label();
    fn test_field_bias() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<model>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bias) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(model),
                "::",
                stringify!(bias)
            )
        );
    }
    test_field_bias();
    fn test_field_rho() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<model>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rho) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(model),
                "::",
                stringify!(rho)
            )
        );
    }
    test_field_rho();
}
extern "C" {
    pub fn train(prob: *const problem, param: *const parameter) -> *mut model;
}
extern "C" {
    pub fn cross_validation(
        prob: *const problem,
        param: *const parameter,
        nr_fold: ::std::os::raw::c_int,
        target: *mut f64,
    );
}
extern "C" {
    pub fn find_parameters(
        prob: *const problem,
        param: *const parameter,
        nr_fold: ::std::os::raw::c_int,
        start_C: f64,
        start_p: f64,
        best_C: *mut f64,
        best_p: *mut f64,
        best_score: *mut f64,
    );
}
extern "C" {
    pub fn predict_values(
        model_: *const model,
        x: *const feature_node,
        dec_values: *mut f64,
    ) -> f64;
}
extern "C" {
    pub fn predict(model_: *const model, x: *const feature_node) -> f64;
}
extern "C" {
    pub fn predict_probability(
        model_: *const model,
        x: *const feature_node,
        prob_estimates: *mut f64,
    ) -> f64;
}
extern "C" {
    pub fn save_model(
        model_file_name: *const ::std::os::raw::c_char,
        model_: *const model,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn load_model(model_file_name: *const ::std::os::raw::c_char) -> *mut model;
}
extern "C" {
    pub fn get_nr_feature(model_: *const model) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_nr_class(model_: *const model) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_labels(model_: *const model, label: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_decfun_coef(
        model_: *const model,
        feat_idx: ::std::os::raw::c_int,
        label_idx: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn get_decfun_bias(model_: *const model, label_idx: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn get_decfun_rho(model_: *const model) -> f64;
}
extern "C" {
    pub fn free_model_content(model_ptr: *mut model);
}
extern "C" {
    pub fn free_and_destroy_model(model_ptr_ptr: *mut *mut model);
}
extern "C" {
    pub fn destroy_param(param: *mut parameter);
}
extern "C" {
    pub fn check_parameter(
        prob: *const problem,
        param: *const parameter,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn check_probability_model(model: *const model) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_regression_model(model: *const model) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_oneclass_model(model: *const model) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_print_string_function(
        print_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char),
        >,
    );
}
